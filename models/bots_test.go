// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBots(t *testing.T) {
	t.Parallel()

	query := Bots()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBotsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bot{}
	if err = randomize.Struct(seed, o, botDBTypes, true, botColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Bots().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBotsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bot{}
	if err = randomize.Struct(seed, o, botDBTypes, true, botColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Bots().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Bots().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBotsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bot{}
	if err = randomize.Struct(seed, o, botDBTypes, true, botColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BotSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Bots().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBotsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bot{}
	if err = randomize.Struct(seed, o, botDBTypes, true, botColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BotExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Bot exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BotExists to return true, but got false.")
	}
}

func testBotsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bot{}
	if err = randomize.Struct(seed, o, botDBTypes, true, botColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	botFound, err := FindBot(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if botFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBotsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bot{}
	if err = randomize.Struct(seed, o, botDBTypes, true, botColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Bots().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testBotsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bot{}
	if err = randomize.Struct(seed, o, botDBTypes, true, botColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Bots().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBotsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	botOne := &Bot{}
	botTwo := &Bot{}
	if err = randomize.Struct(seed, botOne, botDBTypes, false, botColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bot struct: %s", err)
	}
	if err = randomize.Struct(seed, botTwo, botDBTypes, false, botColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = botOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = botTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Bots().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBotsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	botOne := &Bot{}
	botTwo := &Bot{}
	if err = randomize.Struct(seed, botOne, botDBTypes, false, botColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bot struct: %s", err)
	}
	if err = randomize.Struct(seed, botTwo, botDBTypes, false, botColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = botOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = botTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Bots().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func botBeforeInsertHook(e boil.Executor, o *Bot) error {
	*o = Bot{}
	return nil
}

func botAfterInsertHook(e boil.Executor, o *Bot) error {
	*o = Bot{}
	return nil
}

func botAfterSelectHook(e boil.Executor, o *Bot) error {
	*o = Bot{}
	return nil
}

func botBeforeUpdateHook(e boil.Executor, o *Bot) error {
	*o = Bot{}
	return nil
}

func botAfterUpdateHook(e boil.Executor, o *Bot) error {
	*o = Bot{}
	return nil
}

func botBeforeDeleteHook(e boil.Executor, o *Bot) error {
	*o = Bot{}
	return nil
}

func botAfterDeleteHook(e boil.Executor, o *Bot) error {
	*o = Bot{}
	return nil
}

func botBeforeUpsertHook(e boil.Executor, o *Bot) error {
	*o = Bot{}
	return nil
}

func botAfterUpsertHook(e boil.Executor, o *Bot) error {
	*o = Bot{}
	return nil
}

func testBotsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Bot{}
	o := &Bot{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, botDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Bot object: %s", err)
	}

	AddBotHook(boil.BeforeInsertHook, botBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	botBeforeInsertHooks = []BotHook{}

	AddBotHook(boil.AfterInsertHook, botAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	botAfterInsertHooks = []BotHook{}

	AddBotHook(boil.AfterSelectHook, botAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	botAfterSelectHooks = []BotHook{}

	AddBotHook(boil.BeforeUpdateHook, botBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	botBeforeUpdateHooks = []BotHook{}

	AddBotHook(boil.AfterUpdateHook, botAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	botAfterUpdateHooks = []BotHook{}

	AddBotHook(boil.BeforeDeleteHook, botBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	botBeforeDeleteHooks = []BotHook{}

	AddBotHook(boil.AfterDeleteHook, botAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	botAfterDeleteHooks = []BotHook{}

	AddBotHook(boil.BeforeUpsertHook, botBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	botBeforeUpsertHooks = []BotHook{}

	AddBotHook(boil.AfterUpsertHook, botAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	botAfterUpsertHooks = []BotHook{}
}

func testBotsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bot{}
	if err = randomize.Struct(seed, o, botDBTypes, true, botColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Bots().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBotsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bot{}
	if err = randomize.Struct(seed, o, botDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Bot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(botColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Bots().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBotsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bot{}
	if err = randomize.Struct(seed, o, botDBTypes, true, botColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testBotsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bot{}
	if err = randomize.Struct(seed, o, botDBTypes, true, botColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BotSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testBotsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bot{}
	if err = randomize.Struct(seed, o, botDBTypes, true, botColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Bots().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	botDBTypes = map[string]string{`ID`: `int`, `Name`: `varchar`, `AvatarURL`: `varchar`, `Token`: `varchar`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_          = bytes.MinRead
)

func testBotsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(botPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(botAllColumns) == len(botPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Bot{}
	if err = randomize.Struct(seed, o, botDBTypes, true, botColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Bots().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, botDBTypes, true, botPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Bot struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBotsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(botAllColumns) == len(botPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Bot{}
	if err = randomize.Struct(seed, o, botDBTypes, true, botColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Bots().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, botDBTypes, true, botPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Bot struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(botAllColumns, botPrimaryKeyColumns) {
		fields = botAllColumns
	} else {
		fields = strmangle.SetComplement(
			botAllColumns,
			botPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BotSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBotsUpsert(t *testing.T) {
	t.Parallel()

	if len(botAllColumns) == len(botPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLBotUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Bot{}
	if err = randomize.Struct(seed, &o, botDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Bot struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Bot: %s", err)
	}

	count, err := Bots().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, botDBTypes, false, botPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Bot struct: %s", err)
	}

	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Bot: %s", err)
	}

	count, err = Bots().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
