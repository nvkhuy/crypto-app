// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Bots", testBots)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistories)
	t.Run("Symbols", testSymbols)
}

func TestDelete(t *testing.T) {
	t.Run("Bots", testBotsDelete)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesDelete)
	t.Run("Symbols", testSymbolsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Bots", testBotsQueryDeleteAll)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesQueryDeleteAll)
	t.Run("Symbols", testSymbolsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Bots", testBotsSliceDeleteAll)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesSliceDeleteAll)
	t.Run("Symbols", testSymbolsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Bots", testBotsExists)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesExists)
	t.Run("Symbols", testSymbolsExists)
}

func TestFind(t *testing.T) {
	t.Run("Bots", testBotsFind)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesFind)
	t.Run("Symbols", testSymbolsFind)
}

func TestBind(t *testing.T) {
	t.Run("Bots", testBotsBind)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesBind)
	t.Run("Symbols", testSymbolsBind)
}

func TestOne(t *testing.T) {
	t.Run("Bots", testBotsOne)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesOne)
	t.Run("Symbols", testSymbolsOne)
}

func TestAll(t *testing.T) {
	t.Run("Bots", testBotsAll)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesAll)
	t.Run("Symbols", testSymbolsAll)
}

func TestCount(t *testing.T) {
	t.Run("Bots", testBotsCount)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesCount)
	t.Run("Symbols", testSymbolsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Bots", testBotsHooks)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesHooks)
	t.Run("Symbols", testSymbolsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Bots", testBotsInsert)
	t.Run("Bots", testBotsInsertWhitelist)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesInsert)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesInsertWhitelist)
	t.Run("Symbols", testSymbolsInsert)
	t.Run("Symbols", testSymbolsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Bots", testBotsReload)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesReload)
	t.Run("Symbols", testSymbolsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Bots", testBotsReloadAll)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesReloadAll)
	t.Run("Symbols", testSymbolsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Bots", testBotsSelect)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesSelect)
	t.Run("Symbols", testSymbolsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Bots", testBotsUpdate)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesUpdate)
	t.Run("Symbols", testSymbolsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Bots", testBotsSliceUpdateAll)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesSliceUpdateAll)
	t.Run("Symbols", testSymbolsSliceUpdateAll)
}
