// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSymbols(t *testing.T) {
	t.Parallel()

	query := Symbols()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSymbolsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Symbol{}
	if err = randomize.Struct(seed, o, symbolDBTypes, true, symbolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Symbol struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Symbols().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSymbolsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Symbol{}
	if err = randomize.Struct(seed, o, symbolDBTypes, true, symbolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Symbol struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Symbols().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Symbols().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSymbolsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Symbol{}
	if err = randomize.Struct(seed, o, symbolDBTypes, true, symbolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Symbol struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SymbolSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Symbols().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSymbolsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Symbol{}
	if err = randomize.Struct(seed, o, symbolDBTypes, true, symbolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Symbol struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SymbolExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Symbol exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SymbolExists to return true, but got false.")
	}
}

func testSymbolsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Symbol{}
	if err = randomize.Struct(seed, o, symbolDBTypes, true, symbolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Symbol struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	symbolFound, err := FindSymbol(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if symbolFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSymbolsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Symbol{}
	if err = randomize.Struct(seed, o, symbolDBTypes, true, symbolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Symbol struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Symbols().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testSymbolsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Symbol{}
	if err = randomize.Struct(seed, o, symbolDBTypes, true, symbolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Symbol struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Symbols().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSymbolsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	symbolOne := &Symbol{}
	symbolTwo := &Symbol{}
	if err = randomize.Struct(seed, symbolOne, symbolDBTypes, false, symbolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Symbol struct: %s", err)
	}
	if err = randomize.Struct(seed, symbolTwo, symbolDBTypes, false, symbolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Symbol struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = symbolOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = symbolTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Symbols().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSymbolsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	symbolOne := &Symbol{}
	symbolTwo := &Symbol{}
	if err = randomize.Struct(seed, symbolOne, symbolDBTypes, false, symbolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Symbol struct: %s", err)
	}
	if err = randomize.Struct(seed, symbolTwo, symbolDBTypes, false, symbolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Symbol struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = symbolOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = symbolTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Symbols().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func symbolBeforeInsertHook(e boil.Executor, o *Symbol) error {
	*o = Symbol{}
	return nil
}

func symbolAfterInsertHook(e boil.Executor, o *Symbol) error {
	*o = Symbol{}
	return nil
}

func symbolAfterSelectHook(e boil.Executor, o *Symbol) error {
	*o = Symbol{}
	return nil
}

func symbolBeforeUpdateHook(e boil.Executor, o *Symbol) error {
	*o = Symbol{}
	return nil
}

func symbolAfterUpdateHook(e boil.Executor, o *Symbol) error {
	*o = Symbol{}
	return nil
}

func symbolBeforeDeleteHook(e boil.Executor, o *Symbol) error {
	*o = Symbol{}
	return nil
}

func symbolAfterDeleteHook(e boil.Executor, o *Symbol) error {
	*o = Symbol{}
	return nil
}

func symbolBeforeUpsertHook(e boil.Executor, o *Symbol) error {
	*o = Symbol{}
	return nil
}

func symbolAfterUpsertHook(e boil.Executor, o *Symbol) error {
	*o = Symbol{}
	return nil
}

func testSymbolsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Symbol{}
	o := &Symbol{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, symbolDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Symbol object: %s", err)
	}

	AddSymbolHook(boil.BeforeInsertHook, symbolBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	symbolBeforeInsertHooks = []SymbolHook{}

	AddSymbolHook(boil.AfterInsertHook, symbolAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	symbolAfterInsertHooks = []SymbolHook{}

	AddSymbolHook(boil.AfterSelectHook, symbolAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	symbolAfterSelectHooks = []SymbolHook{}

	AddSymbolHook(boil.BeforeUpdateHook, symbolBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	symbolBeforeUpdateHooks = []SymbolHook{}

	AddSymbolHook(boil.AfterUpdateHook, symbolAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	symbolAfterUpdateHooks = []SymbolHook{}

	AddSymbolHook(boil.BeforeDeleteHook, symbolBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	symbolBeforeDeleteHooks = []SymbolHook{}

	AddSymbolHook(boil.AfterDeleteHook, symbolAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	symbolAfterDeleteHooks = []SymbolHook{}

	AddSymbolHook(boil.BeforeUpsertHook, symbolBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	symbolBeforeUpsertHooks = []SymbolHook{}

	AddSymbolHook(boil.AfterUpsertHook, symbolAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	symbolAfterUpsertHooks = []SymbolHook{}
}

func testSymbolsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Symbol{}
	if err = randomize.Struct(seed, o, symbolDBTypes, true, symbolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Symbol struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Symbols().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSymbolsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Symbol{}
	if err = randomize.Struct(seed, o, symbolDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Symbol struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(symbolColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Symbols().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSymbolsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Symbol{}
	if err = randomize.Struct(seed, o, symbolDBTypes, true, symbolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Symbol struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSymbolsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Symbol{}
	if err = randomize.Struct(seed, o, symbolDBTypes, true, symbolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Symbol struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SymbolSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testSymbolsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Symbol{}
	if err = randomize.Struct(seed, o, symbolDBTypes, true, symbolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Symbol struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Symbols().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	symbolDBTypes = map[string]string{`ID`: `int`, `Name`: `varchar`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`}
	_             = bytes.MinRead
)

func testSymbolsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(symbolPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(symbolAllColumns) == len(symbolPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Symbol{}
	if err = randomize.Struct(seed, o, symbolDBTypes, true, symbolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Symbol struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Symbols().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, symbolDBTypes, true, symbolPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Symbol struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSymbolsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(symbolAllColumns) == len(symbolPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Symbol{}
	if err = randomize.Struct(seed, o, symbolDBTypes, true, symbolColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Symbol struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Symbols().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, symbolDBTypes, true, symbolPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Symbol struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(symbolAllColumns, symbolPrimaryKeyColumns) {
		fields = symbolAllColumns
	} else {
		fields = strmangle.SetComplement(
			symbolAllColumns,
			symbolPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SymbolSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSymbolsUpsert(t *testing.T) {
	t.Parallel()

	if len(symbolAllColumns) == len(symbolPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLSymbolUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Symbol{}
	if err = randomize.Struct(seed, &o, symbolDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Symbol struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Symbol: %s", err)
	}

	count, err := Symbols().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, symbolDBTypes, false, symbolPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Symbol struct: %s", err)
	}

	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Symbol: %s", err)
	}

	count, err = Symbols().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
