// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FlywaySchemaHistory is an object representing the database table.
type FlywaySchemaHistory struct {
	InstalledRank int         `boil:"installed_rank" json:"installed_rank" toml:"installed_rank" yaml:"installed_rank"`
	Version       null.String `boil:"version" json:"version,omitempty" toml:"version" yaml:"version,omitempty"`
	Description   string      `boil:"description" json:"description" toml:"description" yaml:"description"`
	Type          string      `boil:"type" json:"type" toml:"type" yaml:"type"`
	Script        string      `boil:"script" json:"script" toml:"script" yaml:"script"`
	Checksum      null.Int    `boil:"checksum" json:"checksum,omitempty" toml:"checksum" yaml:"checksum,omitempty"`
	InstalledBy   string      `boil:"installed_by" json:"installed_by" toml:"installed_by" yaml:"installed_by"`
	InstalledOn   time.Time   `boil:"installed_on" json:"installed_on" toml:"installed_on" yaml:"installed_on"`
	ExecutionTime int         `boil:"execution_time" json:"execution_time" toml:"execution_time" yaml:"execution_time"`
	Success       bool        `boil:"success" json:"success" toml:"success" yaml:"success"`

	R *flywaySchemaHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L flywaySchemaHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FlywaySchemaHistoryColumns = struct {
	InstalledRank string
	Version       string
	Description   string
	Type          string
	Script        string
	Checksum      string
	InstalledBy   string
	InstalledOn   string
	ExecutionTime string
	Success       string
}{
	InstalledRank: "installed_rank",
	Version:       "version",
	Description:   "description",
	Type:          "type",
	Script:        "script",
	Checksum:      "checksum",
	InstalledBy:   "installed_by",
	InstalledOn:   "installed_on",
	ExecutionTime: "execution_time",
	Success:       "success",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var FlywaySchemaHistoryWhere = struct {
	InstalledRank whereHelperint
	Version       whereHelpernull_String
	Description   whereHelperstring
	Type          whereHelperstring
	Script        whereHelperstring
	Checksum      whereHelpernull_Int
	InstalledBy   whereHelperstring
	InstalledOn   whereHelpertime_Time
	ExecutionTime whereHelperint
	Success       whereHelperbool
}{
	InstalledRank: whereHelperint{field: "`flyway_schema_history`.`installed_rank`"},
	Version:       whereHelpernull_String{field: "`flyway_schema_history`.`version`"},
	Description:   whereHelperstring{field: "`flyway_schema_history`.`description`"},
	Type:          whereHelperstring{field: "`flyway_schema_history`.`type`"},
	Script:        whereHelperstring{field: "`flyway_schema_history`.`script`"},
	Checksum:      whereHelpernull_Int{field: "`flyway_schema_history`.`checksum`"},
	InstalledBy:   whereHelperstring{field: "`flyway_schema_history`.`installed_by`"},
	InstalledOn:   whereHelpertime_Time{field: "`flyway_schema_history`.`installed_on`"},
	ExecutionTime: whereHelperint{field: "`flyway_schema_history`.`execution_time`"},
	Success:       whereHelperbool{field: "`flyway_schema_history`.`success`"},
}

// FlywaySchemaHistoryRels is where relationship names are stored.
var FlywaySchemaHistoryRels = struct {
}{}

// flywaySchemaHistoryR is where relationships are stored.
type flywaySchemaHistoryR struct {
}

// NewStruct creates a new relationship struct
func (*flywaySchemaHistoryR) NewStruct() *flywaySchemaHistoryR {
	return &flywaySchemaHistoryR{}
}

// flywaySchemaHistoryL is where Load methods for each relationship are stored.
type flywaySchemaHistoryL struct{}

var (
	flywaySchemaHistoryAllColumns            = []string{"installed_rank", "version", "description", "type", "script", "checksum", "installed_by", "installed_on", "execution_time", "success"}
	flywaySchemaHistoryColumnsWithoutDefault = []string{"installed_rank", "version", "description", "type", "script", "checksum", "installed_by", "execution_time", "success"}
	flywaySchemaHistoryColumnsWithDefault    = []string{"installed_on"}
	flywaySchemaHistoryPrimaryKeyColumns     = []string{"installed_rank"}
)

type (
	// FlywaySchemaHistorySlice is an alias for a slice of pointers to FlywaySchemaHistory.
	// This should generally be used opposed to []FlywaySchemaHistory.
	FlywaySchemaHistorySlice []*FlywaySchemaHistory
	// FlywaySchemaHistoryHook is the signature for custom FlywaySchemaHistory hook methods
	FlywaySchemaHistoryHook func(boil.Executor, *FlywaySchemaHistory) error

	flywaySchemaHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	flywaySchemaHistoryType                 = reflect.TypeOf(&FlywaySchemaHistory{})
	flywaySchemaHistoryMapping              = queries.MakeStructMapping(flywaySchemaHistoryType)
	flywaySchemaHistoryPrimaryKeyMapping, _ = queries.BindMapping(flywaySchemaHistoryType, flywaySchemaHistoryMapping, flywaySchemaHistoryPrimaryKeyColumns)
	flywaySchemaHistoryInsertCacheMut       sync.RWMutex
	flywaySchemaHistoryInsertCache          = make(map[string]insertCache)
	flywaySchemaHistoryUpdateCacheMut       sync.RWMutex
	flywaySchemaHistoryUpdateCache          = make(map[string]updateCache)
	flywaySchemaHistoryUpsertCacheMut       sync.RWMutex
	flywaySchemaHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var flywaySchemaHistoryBeforeInsertHooks []FlywaySchemaHistoryHook
var flywaySchemaHistoryBeforeUpdateHooks []FlywaySchemaHistoryHook
var flywaySchemaHistoryBeforeDeleteHooks []FlywaySchemaHistoryHook
var flywaySchemaHistoryBeforeUpsertHooks []FlywaySchemaHistoryHook

var flywaySchemaHistoryAfterInsertHooks []FlywaySchemaHistoryHook
var flywaySchemaHistoryAfterSelectHooks []FlywaySchemaHistoryHook
var flywaySchemaHistoryAfterUpdateHooks []FlywaySchemaHistoryHook
var flywaySchemaHistoryAfterDeleteHooks []FlywaySchemaHistoryHook
var flywaySchemaHistoryAfterUpsertHooks []FlywaySchemaHistoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FlywaySchemaHistory) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range flywaySchemaHistoryBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FlywaySchemaHistory) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range flywaySchemaHistoryBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FlywaySchemaHistory) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range flywaySchemaHistoryBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FlywaySchemaHistory) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range flywaySchemaHistoryBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FlywaySchemaHistory) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range flywaySchemaHistoryAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FlywaySchemaHistory) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range flywaySchemaHistoryAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FlywaySchemaHistory) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range flywaySchemaHistoryAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FlywaySchemaHistory) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range flywaySchemaHistoryAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FlywaySchemaHistory) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range flywaySchemaHistoryAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFlywaySchemaHistoryHook registers your hook function for all future operations.
func AddFlywaySchemaHistoryHook(hookPoint boil.HookPoint, flywaySchemaHistoryHook FlywaySchemaHistoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		flywaySchemaHistoryBeforeInsertHooks = append(flywaySchemaHistoryBeforeInsertHooks, flywaySchemaHistoryHook)
	case boil.BeforeUpdateHook:
		flywaySchemaHistoryBeforeUpdateHooks = append(flywaySchemaHistoryBeforeUpdateHooks, flywaySchemaHistoryHook)
	case boil.BeforeDeleteHook:
		flywaySchemaHistoryBeforeDeleteHooks = append(flywaySchemaHistoryBeforeDeleteHooks, flywaySchemaHistoryHook)
	case boil.BeforeUpsertHook:
		flywaySchemaHistoryBeforeUpsertHooks = append(flywaySchemaHistoryBeforeUpsertHooks, flywaySchemaHistoryHook)
	case boil.AfterInsertHook:
		flywaySchemaHistoryAfterInsertHooks = append(flywaySchemaHistoryAfterInsertHooks, flywaySchemaHistoryHook)
	case boil.AfterSelectHook:
		flywaySchemaHistoryAfterSelectHooks = append(flywaySchemaHistoryAfterSelectHooks, flywaySchemaHistoryHook)
	case boil.AfterUpdateHook:
		flywaySchemaHistoryAfterUpdateHooks = append(flywaySchemaHistoryAfterUpdateHooks, flywaySchemaHistoryHook)
	case boil.AfterDeleteHook:
		flywaySchemaHistoryAfterDeleteHooks = append(flywaySchemaHistoryAfterDeleteHooks, flywaySchemaHistoryHook)
	case boil.AfterUpsertHook:
		flywaySchemaHistoryAfterUpsertHooks = append(flywaySchemaHistoryAfterUpsertHooks, flywaySchemaHistoryHook)
	}
}

// One returns a single flywaySchemaHistory record from the query.
func (q flywaySchemaHistoryQuery) One(exec boil.Executor) (*FlywaySchemaHistory, error) {
	o := &FlywaySchemaHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for flyway_schema_history")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FlywaySchemaHistory records from the query.
func (q flywaySchemaHistoryQuery) All(exec boil.Executor) (FlywaySchemaHistorySlice, error) {
	var o []*FlywaySchemaHistory

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FlywaySchemaHistory slice")
	}

	if len(flywaySchemaHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FlywaySchemaHistory records in the query.
func (q flywaySchemaHistoryQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count flyway_schema_history rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q flywaySchemaHistoryQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if flyway_schema_history exists")
	}

	return count > 0, nil
}

// FlywaySchemaHistories retrieves all the records using an executor.
func FlywaySchemaHistories(mods ...qm.QueryMod) flywaySchemaHistoryQuery {
	mods = append(mods, qm.From("`flyway_schema_history`"))
	return flywaySchemaHistoryQuery{NewQuery(mods...)}
}

// FindFlywaySchemaHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFlywaySchemaHistory(exec boil.Executor, installedRank int, selectCols ...string) (*FlywaySchemaHistory, error) {
	flywaySchemaHistoryObj := &FlywaySchemaHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `flyway_schema_history` where `installed_rank`=?", sel,
	)

	q := queries.Raw(query, installedRank)

	err := q.Bind(nil, exec, flywaySchemaHistoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from flyway_schema_history")
	}

	return flywaySchemaHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FlywaySchemaHistory) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no flyway_schema_history provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(flywaySchemaHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	flywaySchemaHistoryInsertCacheMut.RLock()
	cache, cached := flywaySchemaHistoryInsertCache[key]
	flywaySchemaHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			flywaySchemaHistoryAllColumns,
			flywaySchemaHistoryColumnsWithDefault,
			flywaySchemaHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(flywaySchemaHistoryType, flywaySchemaHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(flywaySchemaHistoryType, flywaySchemaHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `flyway_schema_history` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `flyway_schema_history` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `flyway_schema_history` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, flywaySchemaHistoryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	_, err = exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into flyway_schema_history")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.InstalledRank,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for flyway_schema_history")
	}

CacheNoHooks:
	if !cached {
		flywaySchemaHistoryInsertCacheMut.Lock()
		flywaySchemaHistoryInsertCache[key] = cache
		flywaySchemaHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the FlywaySchemaHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FlywaySchemaHistory) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	flywaySchemaHistoryUpdateCacheMut.RLock()
	cache, cached := flywaySchemaHistoryUpdateCache[key]
	flywaySchemaHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			flywaySchemaHistoryAllColumns,
			flywaySchemaHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update flyway_schema_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `flyway_schema_history` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, flywaySchemaHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(flywaySchemaHistoryType, flywaySchemaHistoryMapping, append(wl, flywaySchemaHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update flyway_schema_history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for flyway_schema_history")
	}

	if !cached {
		flywaySchemaHistoryUpdateCacheMut.Lock()
		flywaySchemaHistoryUpdateCache[key] = cache
		flywaySchemaHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q flywaySchemaHistoryQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for flyway_schema_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for flyway_schema_history")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FlywaySchemaHistorySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), flywaySchemaHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `flyway_schema_history` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, flywaySchemaHistoryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in flywaySchemaHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all flywaySchemaHistory")
	}
	return rowsAff, nil
}

var mySQLFlywaySchemaHistoryUniqueColumns = []string{
	"installed_rank",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FlywaySchemaHistory) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no flyway_schema_history provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(flywaySchemaHistoryColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLFlywaySchemaHistoryUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	flywaySchemaHistoryUpsertCacheMut.RLock()
	cache, cached := flywaySchemaHistoryUpsertCache[key]
	flywaySchemaHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			flywaySchemaHistoryAllColumns,
			flywaySchemaHistoryColumnsWithDefault,
			flywaySchemaHistoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			flywaySchemaHistoryAllColumns,
			flywaySchemaHistoryPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert flyway_schema_history, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`flyway_schema_history`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `flyway_schema_history` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(flywaySchemaHistoryType, flywaySchemaHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(flywaySchemaHistoryType, flywaySchemaHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	_, err = exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for flyway_schema_history")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(flywaySchemaHistoryType, flywaySchemaHistoryMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for flyway_schema_history")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for flyway_schema_history")
	}

CacheNoHooks:
	if !cached {
		flywaySchemaHistoryUpsertCacheMut.Lock()
		flywaySchemaHistoryUpsertCache[key] = cache
		flywaySchemaHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single FlywaySchemaHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FlywaySchemaHistory) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FlywaySchemaHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), flywaySchemaHistoryPrimaryKeyMapping)
	sql := "DELETE FROM `flyway_schema_history` WHERE `installed_rank`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from flyway_schema_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for flyway_schema_history")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q flywaySchemaHistoryQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no flywaySchemaHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from flyway_schema_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for flyway_schema_history")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FlywaySchemaHistorySlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(flywaySchemaHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), flywaySchemaHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `flyway_schema_history` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, flywaySchemaHistoryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from flywaySchemaHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for flyway_schema_history")
	}

	if len(flywaySchemaHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FlywaySchemaHistory) Reload(exec boil.Executor) error {
	ret, err := FindFlywaySchemaHistory(exec, o.InstalledRank)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FlywaySchemaHistorySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FlywaySchemaHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), flywaySchemaHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `flyway_schema_history`.* FROM `flyway_schema_history` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, flywaySchemaHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FlywaySchemaHistorySlice")
	}

	*o = slice

	return nil
}

// FlywaySchemaHistoryExists checks if the FlywaySchemaHistory row exists.
func FlywaySchemaHistoryExists(exec boil.Executor, installedRank int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `flyway_schema_history` where `installed_rank`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, installedRank)
	}
	row := exec.QueryRow(sql, installedRank)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if flyway_schema_history exists")
	}

	return exists, nil
}
